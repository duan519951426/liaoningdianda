/*
  SASS variables are information about icon's compiled state, stored under its original file name

  .icon-home
    width: $icon-home-width

  The large array-like variables contain all information about a single icon
  $icon-home: x y offset_x offset_y width height total_width total_height image_path

  At the bottom of this section, we provide information about the spritesheet itself
  $spritesheet: width height image $spritesheet-sprites
  */
.syin
  display: inline-block
$imageurl: ''
$h-1: (267px, 175px, -267px, -175px, 30px, 30px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-h-1')
$h-2: (267px, 135px, -267px, -135px, 30px, 30px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-h-2')
$n-0: (0px, 0px, 0px, 0px, 64px, 64px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-n-0')
$n-1: (74px, 0px, -74px, 0px, 64px, 64px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-n-1')
$n-2: (0px, 74px, 0px, -74px, 64px, 64px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-n-2')
$n-3: (74px, 74px, -74px, -74px, 64px, 64px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-n-3')
$n-4: (148px, 0px, -148px, 0px, 64px, 64px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-n-4')
$n-5: (148px, 74px, -148px, -74px, 64px, 64px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-n-5')
$n-6: (0px, 148px, 0px, -148px, 64px, 64px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-n-6')
$n-7: (74px, 148px, -74px, -148px, 64px, 64px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-n-7')
$n-8: (148px, 148px, -148px, -148px, 64px, 64px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-n-8')
$s-0-hover: (222px, 0px, -222px, 0px, 35px, 35px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-s-0-hover')
$s-0: (222px, 135px, -222px, -135px, 35px, 35px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-s-0')
$s-1-hover: (0px, 222px, 0px, -222px, 35px, 35px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-s-1-hover')
$s-1: (45px, 222px, -45px, -222px, 35px, 35px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-s-1')
$s-2-hover: (90px, 222px, -90px, -222px, 35px, 35px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-s-2-hover')
$s-2: (135px, 222px, -135px, -222px, 35px, 35px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-s-2')
$s-3-hover: (180px, 222px, -180px, -222px, 35px, 35px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-s-3-hover')
$s-3: (267px, 0px, -267px, 0px, 35px, 35px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-s-3')
$s-4-hover: (267px, 45px, -267px, -45px, 35px, 35px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-s-4-hover')
$s-4: (267px, 90px, -267px, -90px, 35px, 35px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-s-4')
$s-5-hover: (222px, 90px, -222px, -90px, 35px, 35px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-s-5-hover')
$s-5: (222px, 45px, -222px, -45px, 35px, 35px, 302px, 257px, ($imageurl + 'indexicons.red.png'), 'syin-s-5')
$spritesheet-sprites: ($h-1, $h-2, $n-0, $n-1, $n-2, $n-3, $n-4, $n-5, $n-6, $n-7, $n-8, $s-0-hover, $s-0, $s-1-hover, $s-1, $s-2-hover, $s-2, $s-3-hover, $s-3, $s-4-hover, $s-4, $s-5-hover, $s-5, )

/*
  The provided mixins are intended to be used with the array-like variables

  .icon-home
    @include sprite-width($icon-home)

  .icon-email
    @include sprite($icon-email)

  Example usage in HTML:
    `display: block` sprite:
    <div class="icon-home"></div>

  To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
    // CSS
    .icon {
      display: inline-block;
    }

    // HTML
    <i class="icon icon-home"></i>
  */
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

/*
  The `sprites` mixin generates identical output to the CSS template
    but can be overridden inside of SASS

  @include sprites($spritesheet-sprites)
  */
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
